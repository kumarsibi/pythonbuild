python-build(1) -- compile and install Pythons
============================================

## SYNOPSIS

`python-build` [OPTIONS...] <definition> <prefix><br>
`python-build` `--definitions`<br>
`python-build` `--version`<br>
`python-build` [`-h`|`--help`]<br>
`pyenv install` [OPTIONS...] [<definition>]<br>
`pyenv install` [`-l`|`--list`]<br>
`pyenv uninstall` [`-f`|`--force`] <definition><br>

## DESCRIPTION

**python-build** provides a simple way to compile and install different
versions of Ruby on UNIX-like systems.

`python-build` downloads, builds and installs the Python version specified
in a <definition> into a <prefix> directory. Definitions can be chosen
from the list of installed definitions or by specifying a file path
for a definition.

pyenv(1) users can also use the provided `pyenv install`
command, which installs Pythons into the `pyenv` directory.

## OPTIONS

  * `--definitions`:
    List available definitions.

  * `-f`, `--force`:
    When using `pyenv-install`, force installation of Python versions
    that are already installed. When using `pyenv-uninstall`,
    uninstall without prompting for confirmation or displaying an
    error message for Pythons that are not currently installed.

  * `-k`, `--keep`:
    Don't delete source code after installation.

  * `-p`, `--patch`:
    Apply a patch from standard input to the CPython, Jython or PyPy
    source code before executing the `./configure` step.

  * `-v`, `--verbose`:
    Display compiler messages on standard output.

  * `--version`:
    Show `python-build` version and exit.

  * `-h`, `--help`:
    Show usage information and exit.

## EXAMPLES

Install CPython 3.4.0 to `~/pythons/cpython-3.4.0`:
    python-build 3.4.0 ~/pythons/cpython-3.4.0

Install PyPy 2.2.1 for pyenv(1):
    pyenv install pypy-2.2.1

Install local app-specific Python version:
    pyenv install

Install Python from a custom definition into `~/your-python`:
    pyenv install /path/to/your/own/python/definition ~/your-python

Install CPython 3.4.0, applying the patch in `/path/to/some.patch`:
    pyenv install --patch 3.4.0 < /path/to/some.patch

## ENVIRONMENT

  * `CC`:
    Sets the path to the C compiler.

  * `CONFIGURE_OPTS`:
    Options that are passed to `./configure` when building a Python.

  * `MAKE`:
    Sets the command used for `make`.

  * `MAKE_OPTS`:
    Options that are passed to `make` when building a Python.

  * `MAKEOPTS`:
    Used instead of `MAKE_OPTS` when `MAKE_OPTS` is not defined.

  * `PYTHON_BUILD_BUILD_PATH`:
    Sets the location in which sources are downloaded and built.

  * `PYTHON_BUILD_CACHE_PATH`:
    Sets the location where downloaded package files are cached.

  * `PYTHON_BUILD_MIRROR_URL`:
    Sets the root URL of the mirror from which package files are
    downloaded.

  * `PYTHON_BUILD_SKIP_MIRROR`:
    If set, forces `python-build` to download packages from their
    original source URLs instead of using a mirror.

  * `PYTHON_CFLAGS`:
    Options that are added to the default `CFLAGS` when building a
    Ruby.

  * `PYTHON_CONFIGURE_OPTS`:
    Options that are passed to `./configure` when building a Python. In
    contrast to `CONFIGURE_OPTS`, these are only passed to Python and
    not to any dependent packages (such as libyaml).

  * `PYTHON_MAKE_OPTS`:
    Options that are passed to `make` when building a Python. In
    contrast to `MAKE_OPTS`, these are only passed to Python and not to
    any dependent packages (such as libyaml).

  * `TMPDIR`:
    Sets the location where `python-build` stores temporary files.

## AUTHORS

pyenv is developed by Yamashita, Yuu <<peek824545201@gmail.com>>,
as a clone of rbenv and ruby-build, modified for Pythons.

rbenv and ruby-build are developed by Sam Stephenson <<sam@37signals.com>>.

## SEE ALSO

pyenv(1), pyenv-install(1)
